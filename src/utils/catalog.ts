import { BaseEventModel } from '../base';
import type {
  CatalogErrors,
  CatalogEvent,
  CatalogKey,
  CatalogMetadata,
  StratumCatalog,
  UserDefinedCatalogOptions
} from '../types';
import { Injector } from './injector';

/**
 * Instance of a registered stratum catalog. Takes in user-defined
 * catalog items and metadata and performs validation to transform
 * catalog items into event models.
 */
export class RegisteredStratumCatalog<T extends CatalogEvent = CatalogEvent> {
  /**
   * Internal catalog id, generated from incoming options.
   */
  readonly id: string;

  /**
   * The (derived) catalog metadata provided by the service. The
   * metadata stored in this property has default values populated
   * if not provided by the user.
   */
  readonly metadata: CatalogMetadata;

  /**
   * Flag that indicates whether or not the catalog passed
   * validation. Value is false if any errors are found, regardless
   * of valid models exist.
   */
  isValid = true;

  /**
   * List of catalog item validation errors encountered in the
   * associated event model. List is keyed by the
   * the object's catalog key.
   */
  readonly errors: CatalogErrors = {};

  /**
   * Map of catalog keys loaded by the service to the corresponding
   * BaseEventModel instance. All models in this object are guaranteed
   * to have passed the respective model's validation. Any invalid event
   * models are not included.
   *
   * This is list is referenced by the publishFromCatalog function when determining
   * if a catalog item can be published from the service.
   */
  readonly validModels: { [key in CatalogKey]: BaseEventModel<T> } = {};

  /**
   * Initializes the RegisteredStratumCatalog class. On initialization, the following
   * processes occur:
   *  1. Set defaults for missing catalog metadata
   *  2. Perform validation on provided catalog items
   *
   * @param {string} id - Catalog id (generated by stratum)
   * @param {UserDefinedCatalogOptions<T>} options - Catalog items and metadata provided by the user
   * @param {Injector} injector - Instance of the parent stratum service's injector
   */
  constructor(
    id: string,
    options: UserDefinedCatalogOptions<T>,
    private readonly injector: Injector
  ) {
    this.id = id;
    this.metadata = {
      catalogVersion: options.catalogVersion ?? '',
      componentName: options.componentName ?? injector.productName,
      componentVersion: options.componentVersion ?? injector.productVersion
    };

    // Perform catalog validation
    this.addItems(options.items);

    if (!this.isValid) {
      const keys = Object.keys(this.errors);
      const ct = keys.length;
      injector.logger.debug(
        `${ct} invalid items were removed when registering catalog "${this.id}": ${keys.join(', ')}`
      );
    }
  }

  /**
   * Validates and registers incoming items as models in-place.
   * Invalid items are discarded and associated keys are kept for reporting.
   *
   * Note: a case exists where the same key exists in both errors
   * and validModels if a catalog item failed initially and another item with
   * the same key was added over the catalog creation.
   *
   * @param {StratumCatalog<T>} items Incoming catalog items
   * @return {boolean} Flag indicating whether all items passed validation or
   *   at least item failed validation
   */
  private addItems(items: StratumCatalog<T>): boolean {
    let isCatalogValid = true;
    for (const [key, item] of Object.entries(items)) {
      const errors = [];
      if (key in this.validModels) {
        errors.push('Duplicate key');
      } else {
        const model = this.getEventModel(key, item);
        if (typeof model === 'string') {
          errors.push(model);
        } else {
          if (model.isValid) {
            this.validModels[key] = model;
            this.injector.registerEventId(this.id, model.id);
          } else {
            errors.push(...model.validationErrors);
          }
        }
      }
      if (errors.length) {
        isCatalogValid = false;
        if (key in this.errors) {
          this.errors[key].errors.push(...errors);
        } else {
          this.errors[key] = {
            errors
          };
        }
      }
    }
    this.isValid = this.isValid && isCatalogValid;
    return isCatalogValid;
  }

  /**
   * Helper function to initialize a event model given a catalog item of
   * unknown type and validity.
   *
   * The particular model type to initialize is determined by the item's eventType property.
   * If this property cannot be resolved or the the mapping is unknown, the function
   * returns a string error message.
   *
   * If the underlying item can populate an event model, the instantiated model is returned.
   * The validity of the model is known via model.isValid.
   *
   * @param {CatalogKey} key - Key
   * @param {T} item - Catalog item of unknown event type
   * @return {BaseEventModel<T> | string} Event model instance or error message if a model for the
   *   cannot be found
   */
  private getEventModel(key: CatalogKey, item: T): BaseEventModel<T> | string {
    const eventType = item?.eventType;
    if (!eventType || !(eventType in this.injector.eventTypeModelMap)) {
      return `Event type "${eventType}" not found.`;
    }
    return new this.injector.eventTypeModelMap[eventType].model(key, item, this.id, this.injector);
  }
}

/**
 * Generate a composite catalog id based on provided catalog metadata.
 *
 * The catalog id is a concatenated string of the catalog name and the catalog version.
 *
 * To determine catalog name:
 *   1. Use the component name
 *   2. OR use the product name if component name is not defined
 * To determine catalog version:
 *   1. Use the catalog version
 *   2. OR use the component version if the catalog version is not defined
 *   3. OR use the product version if the component version is not defined
 *
 * @param {UserDefinedCatalogOptions} options User-defined catalog metadata
 * @param {string} productName Product name provided to the StratumService
 * @param {string} productVersion Product version provided to the StratumService
 * @return {string} Generated catalog id
 */
export function generateCatalogId(
  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
  options: UserDefinedCatalogOptions<any>,
  productName: string,
  productVersion: string
): string {
  const name = options.componentName || productName;
  const version = options.catalogVersion || options.componentVersion || productVersion;
  return `${name}:${version}`;
}
